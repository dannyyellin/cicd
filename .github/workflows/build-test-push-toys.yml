name: build-test-push-toys
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and export
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.toys
        tags: toys:latest, ${{ secrets.DOCKER_COURSE_USERNAME }}/toys:latest
        outputs: type=docker,dest=/tmp/image.tar
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: toys-image
        path: /tmp/image.tar  # downloads the image (named image.tar) to the /tmp dir
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    # 1. download image and run it in a container
    - name: Download artifact
      uses: actions/download-artifact@v4  # downloads all artifacts
      with:
        name: toys-image
        path: /tmp
    - name: Load Docker images from previous workflows
      run: docker load --input tmp/image.tar
    - name: check toys-image image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -p8000:8000 toys-image &
    - name: Check container is running
      run: docker ps
#    # 2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using "yet" lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      # 3. run pytest tests and upload the results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd pytest-code
        pytest -v test_toys.py > test_results.txt
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v4
      with:
        name: GH_test_results
        path: pytest-code/test_results.txt
#      The following steps will only execute if tests succeeded
#      # 4. Push images to DockerHub
    - name: Set DATE
      run: echo "DATE=$(date -I)" >> $GITHUB_ENV
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_COURSE_USERNAME }}
        password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
    - name: push image with "latest" and date tags to DH
      run: |
        docker push ${{ secrets.DOCKER_COURSE_USERNAME }}/toys
        docker tag ${{ secrets.DOCKER_COURSE_USERNAME }}/toys \
        ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}
        docker push \
        ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}
